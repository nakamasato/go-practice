// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"tmp/pragmatic-cases/ent/simple-example/ent/itemcategory"
	"tmp/pragmatic-cases/ent/simple-example/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCategoryQuery is the builder for querying ItemCategory entities.
type ItemCategoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ItemCategory
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ItemCategoryQuery builder.
func (icq *ItemCategoryQuery) Where(ps ...predicate.ItemCategory) *ItemCategoryQuery {
	icq.predicates = append(icq.predicates, ps...)
	return icq
}

// Limit adds a limit step to the query.
func (icq *ItemCategoryQuery) Limit(limit int) *ItemCategoryQuery {
	icq.limit = &limit
	return icq
}

// Offset adds an offset step to the query.
func (icq *ItemCategoryQuery) Offset(offset int) *ItemCategoryQuery {
	icq.offset = &offset
	return icq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (icq *ItemCategoryQuery) Unique(unique bool) *ItemCategoryQuery {
	icq.unique = &unique
	return icq
}

// Order adds an order step to the query.
func (icq *ItemCategoryQuery) Order(o ...OrderFunc) *ItemCategoryQuery {
	icq.order = append(icq.order, o...)
	return icq
}

// First returns the first ItemCategory entity from the query.
// Returns a *NotFoundError when no ItemCategory was found.
func (icq *ItemCategoryQuery) First(ctx context.Context) (*ItemCategory, error) {
	nodes, err := icq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{itemcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (icq *ItemCategoryQuery) FirstX(ctx context.Context) *ItemCategory {
	node, err := icq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ItemCategory ID from the query.
// Returns a *NotFoundError when no ItemCategory ID was found.
func (icq *ItemCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = icq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{itemcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (icq *ItemCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := icq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ItemCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ItemCategory entity is found.
// Returns a *NotFoundError when no ItemCategory entities are found.
func (icq *ItemCategoryQuery) Only(ctx context.Context) (*ItemCategory, error) {
	nodes, err := icq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{itemcategory.Label}
	default:
		return nil, &NotSingularError{itemcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (icq *ItemCategoryQuery) OnlyX(ctx context.Context) *ItemCategory {
	node, err := icq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ItemCategory ID in the query.
// Returns a *NotSingularError when more than one ItemCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (icq *ItemCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = icq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = &NotSingularError{itemcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (icq *ItemCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := icq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ItemCategories.
func (icq *ItemCategoryQuery) All(ctx context.Context) ([]*ItemCategory, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return icq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (icq *ItemCategoryQuery) AllX(ctx context.Context) []*ItemCategory {
	nodes, err := icq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ItemCategory IDs.
func (icq *ItemCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := icq.Select(itemcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (icq *ItemCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := icq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (icq *ItemCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return icq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (icq *ItemCategoryQuery) CountX(ctx context.Context) int {
	count, err := icq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (icq *ItemCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return icq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (icq *ItemCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := icq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ItemCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (icq *ItemCategoryQuery) Clone() *ItemCategoryQuery {
	if icq == nil {
		return nil
	}
	return &ItemCategoryQuery{
		config:     icq.config,
		limit:      icq.limit,
		offset:     icq.offset,
		order:      append([]OrderFunc{}, icq.order...),
		predicates: append([]predicate.ItemCategory{}, icq.predicates...),
		// clone intermediate query.
		sql:    icq.sql.Clone(),
		path:   icq.path,
		unique: icq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (icq *ItemCategoryQuery) GroupBy(field string, fields ...string) *ItemCategoryGroupBy {
	grbuild := &ItemCategoryGroupBy{config: icq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return icq.sqlQuery(ctx), nil
	}
	grbuild.label = itemcategory.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (icq *ItemCategoryQuery) Select(fields ...string) *ItemCategorySelect {
	icq.fields = append(icq.fields, fields...)
	selbuild := &ItemCategorySelect{ItemCategoryQuery: icq}
	selbuild.label = itemcategory.Label
	selbuild.flds, selbuild.scan = &icq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ItemCategorySelect configured with the given aggregations.
func (icq *ItemCategoryQuery) Aggregate(fns ...AggregateFunc) *ItemCategorySelect {
	return icq.Select().Aggregate(fns...)
}

func (icq *ItemCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range icq.fields {
		if !itemcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if icq.path != nil {
		prev, err := icq.path(ctx)
		if err != nil {
			return err
		}
		icq.sql = prev
	}
	return nil
}

func (icq *ItemCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ItemCategory, error) {
	var (
		nodes = []*ItemCategory{}
		_spec = icq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ItemCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ItemCategory{config: icq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, icq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (icq *ItemCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := icq.querySpec()
	_spec.Node.Columns = icq.fields
	if len(icq.fields) > 0 {
		_spec.Unique = icq.unique != nil && *icq.unique
	}
	return sqlgraph.CountNodes(ctx, icq.driver, _spec)
}

func (icq *ItemCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := icq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (icq *ItemCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemcategory.Table,
			Columns: itemcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		},
		From:   icq.sql,
		Unique: true,
	}
	if unique := icq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := icq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemcategory.FieldID)
		for i := range fields {
			if fields[i] != itemcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := icq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := icq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := icq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := icq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (icq *ItemCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(icq.driver.Dialect())
	t1 := builder.Table(itemcategory.Table)
	columns := icq.fields
	if len(columns) == 0 {
		columns = itemcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if icq.sql != nil {
		selector = icq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if icq.unique != nil && *icq.unique {
		selector.Distinct()
	}
	for _, p := range icq.predicates {
		p(selector)
	}
	for _, p := range icq.order {
		p(selector)
	}
	if offset := icq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := icq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ItemCategoryGroupBy is the group-by builder for ItemCategory entities.
type ItemCategoryGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (icgb *ItemCategoryGroupBy) Aggregate(fns ...AggregateFunc) *ItemCategoryGroupBy {
	icgb.fns = append(icgb.fns, fns...)
	return icgb
}

// Scan applies the group-by query and scans the result into the given value.
func (icgb *ItemCategoryGroupBy) Scan(ctx context.Context, v any) error {
	query, err := icgb.path(ctx)
	if err != nil {
		return err
	}
	icgb.sql = query
	return icgb.sqlScan(ctx, v)
}

func (icgb *ItemCategoryGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range icgb.fields {
		if !itemcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := icgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := icgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (icgb *ItemCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := icgb.sql.Select()
	aggregation := make([]string, 0, len(icgb.fns))
	for _, fn := range icgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(icgb.fields)+len(icgb.fns))
		for _, f := range icgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(icgb.fields...)...)
}

// ItemCategorySelect is the builder for selecting fields of ItemCategory entities.
type ItemCategorySelect struct {
	*ItemCategoryQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ics *ItemCategorySelect) Aggregate(fns ...AggregateFunc) *ItemCategorySelect {
	ics.fns = append(ics.fns, fns...)
	return ics
}

// Scan applies the selector query and scans the result into the given value.
func (ics *ItemCategorySelect) Scan(ctx context.Context, v any) error {
	if err := ics.prepareQuery(ctx); err != nil {
		return err
	}
	ics.sql = ics.ItemCategoryQuery.sqlQuery(ctx)
	return ics.sqlScan(ctx, v)
}

func (ics *ItemCategorySelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ics.fns))
	for _, fn := range ics.fns {
		aggregation = append(aggregation, fn(ics.sql))
	}
	switch n := len(*ics.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ics.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ics.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ics.sql.Query()
	if err := ics.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
